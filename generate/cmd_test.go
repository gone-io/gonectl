package generate

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"path/filepath"
	"testing"
)

func Test_scanDirGenCode(t *testing.T) {
	rel, err := filepath.Rel("abc/d1/d2", "abc/d1/d2/d3")
	assert.Nil(t, err)
	println(rel)
}

func Test_scanGoFile(t *testing.T) {
	type args struct {
		filename string
		src      any
	}
	tests := []struct {
		name              string
		args              args
		wantPackageName   string
		wantStructNames   []string
		wantLoadFuncNames []string
		wantErr           assert.ErrorAssertionFunc
	}{
		{
			name: "not contain any goners and loadFuncs",
			args: args{
				filename: "p/p.go",
				src:      `package p`,
			},
			wantPackageName:   "p",
			wantStructNames:   nil,
			wantLoadFuncNames: nil,
			wantErr:           assert.NoError,
		},
		{
			name: "error",
			args: args{
				filename: "testdata/main.go",
				src:      ``,
			},
			wantPackageName:   "",
			wantStructNames:   nil,
			wantLoadFuncNames: nil,
			wantErr:           assert.Error,
		},
		{
			name: "contain one gone and one loadFunc",
			args: args{
				filename: "p/p.go",
				src: `package p

import "github.com/gone-io/gone/v2"

type Worker struct {
	gone.Flag
}

func WorkerLoader(loder gone.Loader)error{
	return loader.Load(&Worker{})
}`,
			},
			wantPackageName:   "p",
			wantStructNames:   []string{"Worker"},
			wantLoadFuncNames: []string{"WorkerLoader"},
			wantErr:           assert.NoError,
		},
		{
			name: "contain one gone and one loadFunc And contain other struct and funcs",
			args: args{
				filename: "p/p.go",
				src: `package p

import "github.com/gone-io/gone/v2"

type Worker struct {
	gone.Flag
}

func WorkerLoader(loder gone.Loader)error{
	return loader.Load(&Worker{})
}
func X[T any](loder gone.Loader)error{
	return loader.Load(&Worker{})
}

type Book struct {
	Worker
}

`,
			},
			wantPackageName:   "p",
			wantStructNames:   []string{"Worker"},
			wantLoadFuncNames: []string{"WorkerLoader"},
			wantErr:           assert.NoError,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotPackageName, gotStructNames, gotLoadFuncNames, err := scanGoFile(tt.args.filename, tt.args.src)
			if !tt.wantErr(t, err, fmt.Sprintf("scanGoFile(%v, %v)", tt.args.filename, tt.args.src)) {
				return
			}
			assert.Equalf(t, tt.wantPackageName, gotPackageName, "scanGoFile(%v, %v)", tt.args.filename, tt.args.src)

			if assert.Equalf(t, len(tt.wantStructNames), len(gotStructNames), "scanGoFile(%v, %v)", tt.args.filename, tt.args.src) {
				for i := 0; i < len(tt.wantStructNames); i++ {
					assert.Equalf(t, tt.wantStructNames[i], gotStructNames[i], "scanGoFile(%v, %v)", tt.args.filename, tt.args.src)
				}
			}
			if assert.Equalf(t, len(tt.wantLoadFuncNames), len(gotLoadFuncNames), "scanGoFile(%v, %v)", tt.args.filename, tt.args.src) {
				for i := 0; i < len(tt.wantLoadFuncNames); i++ {
					assert.Equalf(t, tt.wantLoadFuncNames[i], gotLoadFuncNames[i], "scanGoFile(%v, %v)", tt.args.filename, tt.args.src)
				}
			}
		})
	}
}

func Test_genLoadCode(t *testing.T) {
	type args struct {
		goners      []string
		loadFuncs   []string
		packageName string
		packageDir  string
	}
	tests := []struct {
		name         string
		args         args
		wantFilename string
		wantContent  string
	}{
		{
			name: "contain goners and loadFunc",
			args: args{
				goners:      []string{"Worker"},
				loadFuncs:   []string{"WorkerLoader"},
				packageName: "p",
				packageDir:  "p",
			},
			wantFilename: "p/init.gone.go",
			wantContent: `// Code generated by gonectr. DO NOT EDIT.
package p

import "github.com/gone-io/gone"

func init() {
	gone.
		Loads(WorkerLoader)
}
`,
		},
		{
			name: "only contain goners",
			args: args{
				goners:      []string{"Worker", "Worker2", "boss"},
				loadFuncs:   nil,
				packageName: "p",
				packageDir:  "p",
			},
			wantFilename: "p/init.gone.go",
			wantContent: `// Code generated by gonectr. DO NOT EDIT.
package p

import "github.com/gone-io/gone"

func init() {
	gone.
		Load(&Worker{}).
		Load(&Worker2{}).
		Load(&boss{})
}
`,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFilename, gotContent := genLoadCode(tt.args.goners, tt.args.loadFuncs, tt.args.packageName, tt.args.packageDir)
			assert.Equalf(t, tt.wantFilename, gotFilename, "genLoadCode(%v, %v, %v, %v)", tt.args.goners, tt.args.loadFuncs, tt.args.packageName, tt.args.packageDir)
			assert.Equalf(t, tt.wantContent, gotContent, "genLoadCode(%v, %v, %v, %v)", tt.args.goners, tt.args.loadFuncs, tt.args.packageName, tt.args.packageDir)
		})
	}
}
